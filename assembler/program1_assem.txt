move $r7, 111 
move $r2, 010
rtl $r7, $r2
move $r2, 010
add $r7, $r2 // r7 = 00011110(30)
move $r6, 000 //r6 = index 
move $r2, 111
move $r3, 011
rtl $r2, $r3 //r2 = 111000
move $r3, 101
add $r2, $r3 //get &data_mem[61] r2 = 111101 (61)
store $r6, $r2 //data_mem[61] = index
move $r3, 001
add $r2, $r3
store $r7, $r2 //data_mem[62] = 30
load $r0, $r6 //r0 = data_mem[index] = lsw
add $r6, $r3 //r6 = index + 1
load $r1, $r6 //r1 = data_mem[index + 1] = msw
move $r2, 000 //r2 is res  loop location
move $r3, 000 
add $r3, $r0 //r3 = lsw
move $r4, 101  
rtl $r3, $r4 //r3 = b3 b2 b1 b8 b7 b6 b5 b4
move $r4, 111
move $r5, 010 //r5 = 2
rtl $r4, $r5 //r4 = 11100
add $r4, $r5 //r4 = 11110
and $r3, $r4 //r3 is lsw_temp = 000 b8 b7 b6 b5 0
move $r4, 000
add $r4, $r1 //r4 = msw = 0   0   0   0   0 b11 b10 b09  
move $r5, 101 //r5 = 0
rtl $r4, $r5 // r4 is msw_temp = b11 b10 b9 0 0000
add $r2, $r3 //r2 = lsw_temp
add $r2, $r4 //r2 = lsw_temp + msw_temp = b11 b10 b9 b8 b7 b6 b5 0
move $r3, 000
add $r3, $r2 //r3 = res
xor $r3, $r3 //r3 = ^res = p8
add $r2, $r3 //res = res + p8
move $r3, 000
add $r3, $r0 //r3 = res2 = lsw //r3 = res2
move $r4, 111
move $r5, 001
rtl $r4, $r5 //$r4 = 1110
and $r3, $r4  //r3 = 0000 b4  b3  b2 0
move $r4, 100 //r4 = 4
rtl $r3, $r4 //res2 = res2 << 4 = b4 b3 b2 0 0 0 0 0 0
move $r4, 000 //calculate p4
add $r4, $r1 
xor $r4, $r4 //r4 is t1 = ^msw
move $r5, 001
rtl $r4, $r5 //r4 is t1
move $r5, 000
add $r5, $r0 //r5 is t2 = lsw
move $r6, 001
move $r7, 110 
rtl $r6, $r7 //r6 = 1000000
move $r7, 111
add $r6, $r7 //r6 = 1000111
move $r7, 001
rtl $r6, $r7 //r6 is 1000 1110
and $r5, $r6 //r5 = r5 && 1000 1110 = b8 000 b4 b3 b2 0
xor $r5, $r5 
add $r4, $r5
xor $r4, $r4 //t1 = ^t1
move $r5, 100 //r5 = 4
rtl $r4, $r5 //r4 = r4 << 4 = p4 0000
add $r3, $r4  // b4 b3 b2 p4 0 0 0 0
move $r4, 001
and $r4, $r0 //r4 = lsw && 0000 0001 = b1
move $r5, 011 //r5 = 3
rtl $r4, $r5 //r4 = b1 000
add $r3, $r4  //res2 = b4  b3  b2  p4  b1  000
move $r4, 000
add $r4, $r1 //start to calculate p2
move $r5, 110 
and $r4, $r5 //r4 is t1 r4 = 0 0 0 0  0 b11 b10 0
xor $r4, $r4
move $r5, 001
rtl $r4, $r5 //r4 = 0000 00 ^(b11,b10) 0
move $r5, 000 //r5 = lsw
add $r5, $r0 
move $r6, 110
move $r7, 011
rtl $r6, $r7 //r6 = 11 0000
move $r7, 110
add $r6, $r7 //r6 = 11 0110
move $r7, 001
rtl $r6, $r7   //0110 1100
add $r6, $r7 // r6 = 0110 1101
and $r5, $r6 
xor $r5, $r5 //r5 = ^(b7  b6  b4  b3  b1)
add $r4, $r5 
xor $r4, $r4 // r4 = p2
move $r5, 010 //r5 = 2
rtl $r4, $r5 //r4 = 0000 0 p2 00
add $r3, $r4 // b4 b3 b2 p4 b1 p2 0 0
move $r4, 000 //calculate p1
add $r4, $r1
move $r5, 101 
and $r4, $r5 //r4 = b11 0 b9
xor $r4, $r4 //r4 = ^(b11 b9)
move $r5, 001
rtl $r4, $r5 //r4 = ^(b11 b9) 0
move $r5, 000
add $r5, $r0 
move $r6, 101 
move $r7, 011 //r7 = 3
rtl $r6, $r7 //r6 = 10 1000
move $r7, 101 
add $r6, $r7 //r6 = 10 1101
move $r7, 001
rtl $r6, $r7 //r6 = 101 1010
add $r6, $r7 //r6 = 0101 1011
and $r5, $r6 //r5 = b7 0 b5 b4 0 b2 b1
xor $r5, $r5 //r5 = ^(b7,b5,b4,b2,b1)
add $r4, $r5 
xor $r4, $r4 
move $r5, 001 
rtl $r4, $r5 //r4 = p1 0
add $r3, $r4 // b4 b3 b2 p4 b1 p2 p1 0
move $r4, 000 //calculate p0
add $r4, $r2 
xor $r4, $r4 //r4 = t1 = ^(res)
move $r5, 001
rtl $r4, $r5 //r4 = t1 = ^(res) 0
move $r5, 000
add $r5, $r3 
xor $r5, $r5 //r5 = t2 = ^(res2)
add $r4, $r5
xor $r4, $r4 
add $r3, $r4  // b4 b3 b2 p4 b1 p2 p1 p0
move $r4, 111
move $r5, 011 //r5 = 3
rtl $r4, $r5 //r4 = 111000
move $r5, 101
add $r4, $r5 //r4 = 0011 1101 (61)
load $r6, $r4 //r6 = data_mem[61] = index
move $r5, 001 
add $r4, $r5 //r4 = 0011 1110 (62)
load $r7, $r4 //r7 = 30
move $r4, 000
add $r4, $r6 //r4 = index
add $r4, $r7 //r4 = index + 30
store $r3, $r4 //data_mem[idx+30] = res2;
add $r4, $r5 // r4 = r4 + r5 = r4 + 1 = index + 31
store $r2, $r4 //data_mem[idx+31] = res;
move $r5, 010
add $r6, $r5 //index = index + 2
beq 010000 //if new idx = 30, end loop beq 16
move $r4, 111 
move $r5, 011 
rtl $r4, $r5  //r4 = 111000
move $r5, 101 
add $r4, $r5 //r4 = 0011 1101 (61)
store $r6, $r4 //data_mem[61] = index
load $r0, $r6 //r0 = lsw
move $r4, 001
add $r6, $r4 //r6 = index + 1
load $r1, $r6 //r1 = msw
move $r6, 000
move $r7, 000
beq 010001 //beq loop = beq 17 162: end