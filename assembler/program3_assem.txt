move $r1, 010     // $1 = 2 (0000 0010)
add $r2, $r2      // $2 = 4 (0000 0100)
rtl $r1, $r2      // $1 = 0010 0000 = 32 (in decimal)
load $r1, $r1     // $1 = pattern = data_mem[32]
move $r3, 111     // $3 = 0000 0111
move $r4, 001     // $4 = 0000 0001
rtl $r3, $r4      // $3 = 0000 1110
add $r3, $r4      // $3 = 0000 1111
rtl $r3, $r2      // $3 = 1111 0000
move $r5, 011     // $5 = 0000 0011
rtl $r4, $r5      // $4 = 0000 1000
add $r3, $r4      // $3 = 1111 1000
and $r1, $r3      // $1 = pattern & 1111 1000
move $r4, 000     // $4 = 0000 0000 = num_pattern
move $r0, 000     // $r0 = 0000 0000 = index
move $r5, 000     // $5 = 0000 0000 = i
load $r6, $r0      // $6 = data_mem[index]
move $r7, 000
add $r7, $r6
rtl $r7, $r5        // $7 = data_mem[index] << i
and $r7, $r3        // $7 = $7 && 1111 1000
move $r6, 000
add $r6, $r1       
beq 000000  // PC = PC + 11
move $r7, 001
add $r5, $r7     // i++
move $r6, 000
add $r6, $r5
move $r7, 000
add $r7, $r2
beq 000001 // PC = PC + 15
move $r6, 000
move $r7, 000
beq 000010 // PC = PC - 17
move $r7, 001
add $r4, $r7     // $4 = num_pattern++
add $r5, $r7     // i++
move $r6, 000
add $r6, $r5
move $r7, 000
add $r7, $r2
beq 000011 // PC = PC + 4
move $r6, 000
move $r7, 000
beq 000100 // PC = PC - 28
move $r5, 001   
add $r0, $r5     // $r0 = index++
move $r6, 010
rtl $r6, $r2     // $6 = 32  
move $r7, $r0
beq 000011 // PC = PC + 4
move $r6, 000
move $r7, 000
beq 000101 // PC = PC - 38
move $r5, 010   // $1 = 0000 0010
rtl $r5, $r2     // $1 = 0010 0000 = 32 (in decimal)
move $r6, 001
add $r5, $r6     // $5 = 33 (in decimal)
store $r4, $r5    // data_mem[33] = num_pattern
move $r4, 000   // $4 = 0000 0000 = num_byte
move $r0, 000   // $0 = 0000 0000 = index
move $r5, 000     // $5 = 0000 0000 = i
load $r6, $r0      // $6 = data_mem[index]
move $r7, 000
add $r7, $r6
rtl $r7, $r5        // $7 = data_mem[index] << i
and $r7, $r3        // $7 = $7 && 1111 1000
move $r6, 000
add $r6, $r1       
beq 000000 // PC = PC + 11
move $r7, 001
add $r5, $r7     // i++
move $r6, 000
add $r6, $r5
move $r7, 000
add $r7, $r2
beq 000110 // PC = PC + 6
move $r6, 000
move $r7, 000
beq 000010 // PC = PC - 17
move $r7, 001
add $r4, $r7     // $4 = num_pattern++
move $r5, 001   
add $r0, $r5     // $0 = index++
move $r6, 010
rtl $r6, $r2     // $6 = 32  
move $r7, 000
add $r7, $r0
beq 000011   // PC = PC  + 4
move $r6, 000
move $r7, 000
beq 000111  // PC = PC - 30
move $r5, 010   // $1 = 0000 0010
rtl $r5, $r2     // $1 = 0010 0000 = 32 (in decimal)
move $r6, 010
add $r5, $r6     // $5 = 34 (in decimal)
store $r4, $r5    // data_mem[34] = num_byte
move $r4, 000   // $4 = 0000 0000 = num_pattern
move $r0, 000   // $0 = 0000 0000 = index
move $r5, 000     // $5 = 0000 0000 = i
load $r6, $r0      // $6 = data_mem[index]
move $r7, 000
add $r7, $r6
rtl $r7, $r5        // $7 = data_mem[index] << i
and $r7, $r3        // $7 = $7 && 1111 1000
move $r6, 000
add $r6, $r1       
beq 000000   // PC = PC + 11
move $r7, 001
add $r5, $r7     // i++
move $r6, 000
add $r6, $r5
move $r7, 000
add $r7, $r2
beq 000001   // PC = PC + 15
move $r6, 000
move $r7, 000
beq 001000  // PC = PC - 18
move $r7, 001
add $r4, $r7     // $4 = num_pattern++
add $r5, $r7     // i++
move $r6, 000
add $r6, $r5
move $r7, 000
add $r7, $r2
beq 001001   // PC = PC - 26
move $r6, 000
move $r7, 000
beq 001010 // PC = PC - 29
move $r5, 001   
add $r0, $r5     // $0 = index++
move $r6, 010
rtl $r6, $r2     // $6 = 32  
move $r7, 000
add $r7, $r0
beq 000011 // PC = PC + 4
move $r6, 000
move $r7, 000
beq 001011      // PC = PC - 39
move $r0, 000   // $0 = 0000 0000 = index
move $r5, 000     // $5 = 0000 0000 = i
move $r7, 000
add $r7, $r0
move $r6, 001
add $r7, $r6
load $r7, $r7    // $7 = data_mem[index+1]
and $r7, $r3     // $7 = data_mem[index+1] & 1111 0000
rtl $r7, $r2
move $r6, 000
add $r6, $r7
load $r7, $r0    // $6 = data_mem[index]
rtl $r7, $r2
and $r7, $r3     
rtl $r7, $r2
add $r6, $r7     // last four bits from data_mem[index] + first four bits from data_mem[index + 1]
move $r7, 000
add $r7, $r6
rtl $r7, $r5        // $7 = mid_byte << i
and $r7, $r3        // $7 = $7 && 1111 1000
move $r6, 000
add $r6, $r1       
beq 000000   // PC = PC + 11
move $r7, 001
add $r5, $r7     // i++
move $r6, 000
add $r6, $r5
move $r7, 000
add $r7, $r2
beq 000001   // PC = PC + 15
move $r6, 000
move $r7, 000
beq 000111  // PC = PC - 30 
move $r7, 001
add $r4, $r7     // $4 = total_pattern++
add $r5, $r7     // i++
move $r6, 000
add $r6, $r5
move $r7, 000
add $r7, $r2
beq 000011   // PC = PC + 4
move $r6, 000
move $r7, 000
beq 001100  // PC = PC - 41
move $r5, 001   
add $r0, $r5     // $0 = index++
move $r6, 111
move $r5, 010
rtl $r6, $r5     // $6 = 0001 1100
move $r5, 011
add $r6, $r5     // $6 = 31 (0001 1111)
move $r7, 000
add $r7, $r0
beq 000011 // PC = PC + 4
move $r6, 000
move $r7, 000
beq 001101    // PC = PC - 54
move $r5, 010   // $1 = 0000 0010
rtl $r5, $r2     // $1 = 0010 0000 = 32 (in decimal)
move $r6, 100
add $r5, $r6     // $5 = 34 (in decimal)
store $r4, $r5    // data_mem[34] = total_pattern
