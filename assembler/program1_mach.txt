100111111
100010010
111111010
100010010
000111010   //r7 = 00011110(30)
100110000   //r6 = index
100010111
100011011
111010011   //r2 = 111000
100011101
000010011   //get &data_mem[61] r2 = 111101 (61)
110110010   //data_mem[61] = index
100011001
000010011
110111010   //data_mem[62] = 30
101000110   //r0 = data_mem[index] = lsw
000110011   //r6 = index + 1
101001110   //r1 = data_mem[index + 1] = msw
100010000   //r2 is res  loop location
100011000
000011000   //r3 = lsw
100100101
111011100   //r3 = b3 b2 b1 b8 b7 b6 b5 b4
100100111
100101010   //r5 = 2
111100101   //r4 = 11100
000100101   //r4 = 11110
001011100   //r3 is lsw_temp = 000 b8 b7 b6 b5 0
100100000
000100001   //r4 = msw = 0   0   0   0   0 b11 b10 b09
100101101   //r5 = 0
111100101   //r4 is msw_temp = b11 b10 b9 0 0000
000010011   //r2 = lsw_temp
000010100   //r2 = lsw_temp + msw_temp = b11 b10 b9 b8 b7 b6 b5 0
100011000
000011010   //r3 = res
010011011   //r3 = ^res = p8
000010011   //res = res + p8
100011000
000011000   //r3 = res2 = lsw //r3 = res2
100100111
100101001
111100101   //$r4 = 1110
001011100   //r3 = 0000 b4  b3  b2 0
100100100   //r4 = 4
111011100   //res2 = res2 << 4 = b4 b3 b2 0 0 0 0 0 0
100100000   //calculate p4
000100001
010100100   //r4 is t1 = ^msw
100101001
111100101   //r4 is t1
100101000
000101000   //r5 is t2 = lsw
100110001
100111110
111110111   //r6 = 1000000
100111111
000110111   //r6 = 1000111
100111001
111110111   //r6 is 1000 1110
001101110   //r5 = r5 && 1000 1110 = b8 000 b4 b3 b2 0
010101101
000100101
010100100   //t1 = ^t1
100101100   //r5 = 4
111100101   //r4 = r4 << 4 = p4 0000
000011100   //b4 b3 b2 p4 0 0 0 0
100100001
001100000   //r4 = lsw && 0000 0001 = b1
100101011   //r5 = 3
111100101   //r4 = b1 000
000011100   //res2 = b4  b3  b2  p4  b1  000
100100$r1   //start to calculate p2
100101110
001100101   //r4 is t1 r4 = 0 0 0 0  0 b11 b10 0
010100100
100101001
111100101   //r4 = 0000 00 ^(b11b10) 0
100101000   //r5 = lsw
000101000
100110110
100111011
111110111   //r6 = 11 0000
100111110
000110111   //r6 = 11 0110
100111001
111110111   //0110 1100
000110111   //r6 = 0110 1101
001101110
010101101   //r5 = ^(b7  b6  b4  b3  b1)
000100101
010100100   //r4 = p2
100101010   //r5 = 2
111100101   //r4 = 0000 0 p2 00
000011100   //b4 b3 b2 p4 b1 p2 0 0
100100000   //calculate p1
000100001
100101101
001100101   //r4 = b11 0 b9
010100100   //r4 = ^(b11 b9)
100101001
111100101   //r4 = ^(b11 b9) 0
100101000
000101000
100110101
100111011   //r7 = 3
111110111   //r6 = 10 1000
100111101
000110111   //r6 = 10 1101
100111001
111110111   //r6 = 101 1010
000110111   //r6 = 0101 1011
001101110   //r5 = b7 0 b5 b4 0 b2 b1
010101101   //r5 = ^(b7b5b4b2b1)
000100101
010100100
100101001
111100101   //r4 = p1 0
000011100   //b4 b3 b2 p4 b1 p2 p1 0
100100000   //calculate p0
000100010
010100100   //r4 = t1 = ^(res)
100101001
111100101   //r4 = t1 = ^(res) 0
100101000
000101011
010101101   //r5 = t2 = ^(res2)
000100101
010100100
000011100   //b4 b3 b2 p4 b1 p2 p1 p0
100100111
100101011   //r5 = 3
111100101   //r4 = 111000
100101101
000100101   //$r4 = 0011 1101 (61)
101110100   //r6 = data_mem[61] = index
100101001
000100101   //r4 = 0011 1110 (62)
101111100   //r7 = 30
100100000
000100110   //r4 = index
000100111   //r4 = index + 30
110011100   //data_mem[idx+30] = res2;
000100101   //r4 = r4 + r5 = r4 + 1 = index + 31
110010100   //data_mem[idx+31] = res;
100101010
000110101   //index = index + 2
011010000   //if new idx = 30 end loop beq 16
100100111
100101011
111100101   //r4 = 111000
100101101
000100101   //$r4 = 0011 1101 (61)
110110100   //data_mem[61] = index
101000110   //r0 = lsw
100100001
000110100   //r6 = index + 1
101001110   //r1 = msw
100110000
100111000
011010001   //beq loop = beq 17 162: end
